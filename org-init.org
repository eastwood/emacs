#+STARTUP: overview
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
(linum-mode 1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
* Evil
Evil complements the emacs ecosystem perfectly. The first thing I do is get this set up!
It's super important to have the leader keymap as well, so that I can perform all my combinations super fast.
A lot of these keybindings have been heavily influenced from spacemacs.
I like to throw in magit support and surround support too (kudos to Tim Pope as always).
#+BEGIN_SRC emacs-lisp
(use-package evil
  :diminish evil-mode
  :ensure t
  :config
  (evil-mode 1))
(use-package evil-magit
  :ensure t)
(use-package evil-leader
  :ensure t
  :config
  (evil-leader/set-leader "SPC")
  (evil-leader/set-key
   "SPC" 'counsel-M-x
   "bb" 'ivy-switch-buffer
   "bd" 'kill-buffer
   "gs" 'magit-status
   "bn" 'next-buffer
   "bp" 'previous-buffer
   "fs" 'save-buffer
   "ff" 'counsel-find-file
   "fed" 'open-config-file
   "tl" 'toggle-truncate-lines
   "wc" 'evil-window-delete
   "wo" 'delete-other-windows
   "wj" 'evil-window-down
   "wk" 'evil-window-up
   "wh" 'evil-window-left
   "wl" 'evil-window-right
   "wv" 'evil-window-vsplit
   "ws" 'evil-window-split)
  (global-evil-leader-mode))
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode))
#+END_SRC
* NeoTree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  ;; Some nice bindings for evil
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (setq neo-theme 'nerd)
  (setq neo-smart-open t))
#+END_SRC
* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t 
  :config
  (which-key-mode))
#+END_SRC

* Org Bullet Points
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (ac-config-default)
  (global-auto-complete-mode t))
#+END_SRC

* Colorthemes
#+BEGIN_SRC emacs-lisp
(use-package color-theme
  :ensure t)
(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
#+END_SRC
  
* Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
      ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC
  
* Ivy/Swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t)
(use-package swiper
  :ensure t
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  :bind
  ("s-f" . swiper)
  ("M-x" . counsel-M-x)
  ("M-y" . counsel-yank-pop)
  ("C-x C-f" . counsel-find-file))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
  
* Javascript
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t)
(use-package js2-mode
  :diminish js2-mode
  :ensure t
  :config
  (setq js2-basic-offset 2)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
(use-package web-mode
  :ensure t
  :config
  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))
  (add-hook 'web-mode-hook  'my-web-mode-hook)
  (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode)))
#+END_SRC
* FlyCheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :ensure t
  :config
  (require 'flycheck)
  (global-flycheck-mode)
  (setq-default flycheck-disabled-checker 'javascript-jshint)
  (setq-default flycheck-disabled-checker 'json-jsonlist)
  (setq-default flycheck-javascript-eslint-executable "eslint-project-relative")
  (flycheck-add-mode 'javascript-eslint 'web-mode))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :ensure t
  :commands (projectile-find-file projectile-switch-project)
  :bind ("s-p" . projectile-find-file)
  :config
  (evil-leader/set-key
    "pf" 'projectile-find-file
    "pp" 'projectile-switch-project
    "ft" 'neotree-toggle
    "pt" 'neotree-find-project-root)
  (setq projectile-completion-system 'ivy)
  (projectile-global-mode))
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp
;; OSX fix for eslint lookup
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))

(defun neotree-find-project-root()
  (interactive)
  (if (neo-global--window-exists-p)
      (neotree-hide)
    (let ((origin-buffer-file-name (buffer-file-name)))
      (neotree-find (projectile-project-root))
      (neotree-find origin-buffer-file-name))))

(defun open-config-file()
  (interactive)
  (find-file "~/.emacs.d/org-init.org"))

#+END_SRC
  
